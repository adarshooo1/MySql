--Group By = Aggregate all rows by a specific column
--often used with aggregate functions
--ex. SUM(), MAX(), MIN(), AVG(), COUNT().

To create a table:
cmd:create table Record(
    Serial_No int,
    first_name varchar(50),
    last_name varchar(30),
    transaction_id int,
    amount decimal(5.2),
    transaction_date date
    );

To Insert values inside a table:
cmd:-- Insert into record
    -- values (1,"Adarsh","Singh",2001,432.43,"2022-03-12"),
    -- (2,"Jagrit","Pratap",2002,543.11,"2022-03-16"),
    -- (3,"Deepu","Chauhan",2003,32.43,"2022-03-20"),
    -- (4,"Alexander","Great",2004,423.54,"2022-03-25"),
    -- (5,"Garry","Nicolas",2005,897.32,"2022-04-1"),
    -- (6,"Adarsh", "Singh" ,2001 , 987.2, "2022-04-2"),
    -- (7,"Maddy","Jones",null,823.2,"2022-04-6"),
    -- (8,"Deepu","Chauhan",2003,1000,"2022-04-10"),
    -- (9,"Mike","Tyson",null,334,"2022-03-15");

To order thing as per the data using sum() and group by transaction_id:
cmd:select sum(amount), transaction_id
    from record
    group by transaction_id;
    //Here we group by transaction_id because as we can see that we have multiple transaction_id which is same but differentiated by Serial_No, amount and date. So Here we sum the amount and with the reference of transaction_id we group the amount with the help of sum() function.

To order thing as per the data using sum() and group by transaction_date:
cmd:select sum(amount), transaction_date
    from record
    group by transaction_date;

//Like this we can group by max(), min(), avg(), count().

//We can also do like this:
cmd:select sum(amount), transaction_id, first_name
    from record
    group by transaction_id , first_name;
    //This will give the data according to the first_Name , transaction_id and sum amount.

//How to use Having clause instead of where clasue because where is not working with this:
cmd:SELECT SUM(amount), transaction_id, first_name
    FROM record
    GROUP BY transaction_id , first_name
    HAVING SUM(amount) > 600 AND transaction_id IS NOT NULL;
---------------------------------------------------------------------------------------------
//ClassicModels Sample Database Query:
cmd: select productLine,
     count(*) as "Product Count" from Products group by productLine;
	//This will select all the distinct product and show all the count of each product.

-- --------------------------------------------------- --
-- --         Standard Grouping Syntax		        -- --
-- SELECT c1, c2, ...c*n,aggregate_function(ci)        --
-- from table			   				               --
-- group by c1,c1 , ...c*n;	      			           --
-- --------------------------------------------------- --

select
	officeCode,
       	city,
	state,
	count(*) as "Office Code Count" from employees
	join offices using (officeCode)  -- using join to display items from other table as well.
	group by officeCode , city , state;

-- -- Query 2:
-- -- Total Payments from each customer after a certain date.
SELECT 
customerNumber as "Customer.No", customerName as Name, sum(amount) as Amount
FROM
    customers
        JOIN
    payments USING (customerNumber)
    where paymentDate >"2005-1-08"
    group by customerNumber;    

-- Query 3:
-- Value of Each unique Order sorted by total order value.
SELECT 
    orderNumber, SUM(priceEach * quantityOrdered) AS TotalPrice
FROM
    orderDetails
GROUP BY orderNumber
ORDER BY orderNumber ASC;

-- Query 4:
-- Value of Each unique Order, and its customer number sorted by total order value.
SELECT 
    customerNumber,
    orderNumber,
    SUM(quantityOrdered * priceEach) AS Total,
    customerName
FROM
    orderDetails
        JOIN
    orders USING (orderNumber)
        JOIN
    customers USING (customerNumber)
GROUP BY orderNumber
having Total > 20000
ORDER BY Total ASC;

-- Query 5:
-- Count of Order for each customer placed by each customer, We have some customers, Customers have many orders (group them) then display the results;
SELECT 
    customerNumber,
    customerName as 'Customer Name',
    count(customerNumber) AS 'Total Orders'
FROM
    orders
        JOIN
    customers USING (customerNumber)
GROUP BY customerNumber;   

-- Query 6: (HARD)
-- Count of Order through each sales representative
SELECT 
    salesRepEmployeeNumber AS 'Emp.No',
    LastName,
    COUNT(orderNumber) AS Total
FROM
    orders
        JOIN
    customers USING (customerNumber)
        JOIN
    employees ON customers.salesRepEmployeeNumber = employees.employeeNumber
GROUP BY employeeNumber
ORDER BY salesRepEmployeeNumber ASC;


-- Query 7:
-- Count of Order country wise;
SELECT 
    country, COUNT(orderNumber)
FROM
    customers
        JOIN
    orders USING (customerNumber)
GROUP BY country;


-- Query 8:
-- Count of Order country wise and group by date;
SELECT 
    country, orderDate,COUNT(orderNumber)
FROM
    customers
        JOIN
    orders USING (customerNumber)
GROUP BY country , orderDate
order by country asc;

-- Query 9:
-- Customer with min order values
SELECT 
    customerNumber AS 'Customer No.',
    customerName AS 'Name',
    SUM(priceEach * quantityOrdered) AS Total
FROM
    customers
        JOIN
    orders USING (customerNumber)
        JOIN
    orderDetails USING (orderNumber)
    WHERE country = "France"
GROUP BY customerNumber , customerName
HAVING Total > 80000;